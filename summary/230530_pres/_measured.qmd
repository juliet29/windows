# Analysis: Measurements 


## Simulated vs Measured Results 
<!-- TODO: real vs observed data   -->
```{python}

a00, a01 = h.import_desired_data("A", "15T")

w1 = wd2.Window_Detect2(a01)
w1.analyze_window_change(wd2.make_stl_smooth)
# fig = w1.plot_analysis()

# for name in ["Smoothed", "Difference", "Deriv1", "Deriv2"]:
#     fig.update_traces(visible="legendonly",selector=dict(name=name))
# fig.show()

```

```{python}
#| layout-ncol: 2

def show_double_fig(trace, obj1=s1, obj2=w1):
    fig1 = show_single_trace(obj1, trace, showlegend=False, width=480)
    fig1.show()
    fig2 = show_single_trace(obj2, trace, width=500)
    fig2.show()

show_double_fig("Observed Temp")
```

## Smoothing with STL
<!-- TODO: STL figure-->


```{python}
#| layout-ncol: 2
show_double_fig("Smoothed")
```

## 3. Difference
```{python}
#| layout-ncol: 2
show_double_fig("Difference")
```

## Derivatives 
```{python}
#| layout-ncol: 2
show_double_fig("Deriv1")

```

## Derivatives

```{python}
#| layout-ncol: 2
show_double_fig("Deriv2")

```

## Making Predictions 
::: {.r-stack}

```{python}
#| layout-ncol: 2
#| output-location: fragment

def show_double_result(func, obj1=s1, obj2=w1, width=500, height=500):
    if func == "dist":
        fig1 = obj1.plot_distributions()
        fig2 = obj2.plot_distributions()
    elif func == "z":
        fig1 = obj1.plot_zscore()
        fig2 = obj2.plot_zscore()
    elif func == "guess_nofilter":
        fig1 = obj1.plot_guesses(timedelta=1)
        fig2 = obj2.plot_guesses(timedelta=1)
    else:
        fig1 = obj1.plot_guesses()
        fig2 = obj2.plot_guesses()
    fig1.update_layout(autosize=False, width=width, height=height, showlegend=False)
    fig2.update_layout(autosize=False, width=width, height=height,)
    fig1.show()
    fig2.show()

show_double_result("dist")
```

::: {.fragment}
```{python}
#| layout-ncol: 2
#| output-location: fragment
show_double_result("z")
```
:::

::: {.fragment}
```{python}
#| layout-ncol: 2
#| output-location: fragment
show_double_result("guess_nofilter")
```
:::

::: {.fragment}
```{python}
#| layout-ncol: 2
#| output-location: fragment
show_double_result("guess")
```
:::


:::



## Other Smoothing Techniques 
- Fitting a sinusoid 
- Modifying the STL technique?
- Exponentially weighted mean function 

## Other Smoothing Techniques Results
<!-- TODO: othe rsmoothing technique figures -->

::: {.r-stack}
```{python}

w2 = wd2.Window_Detect2(a01)
w2.analyze_window_change(wd2.make_sin_smooth)

w3 = wd2.Window_Detect2(a01)
w3.analyze_window_change(wd2.make_ewm_smooth)

fig, names = wd2.make_dual_plot(w2.time, w2, w3, ["Sinusoid", "EWM"])
fig = fig.update_layout(autosize=False, width=1000, height=500,)

fig1 = wd2.update_dual_plot(fig,  names, ["Window", "Observed Temp", "Smoothed"],)

fig1.show()

```

::: {.fragment}
```{python}

fig1 = wd2.update_dual_plot(fig,  names, ["Window", "Deriv1",],)

fig1.show()
```
:::


:::


## Comparing Results 
<!-- table TODO: de raultin de roy metrics + compare to other ML methods on same data  -->


## reflections 
- better understanding the unique way that w/o/c appears in the time series
  - how this differs 
    - based on time of day 
    - length of w/o/c
  - can use BEM + CFD for this?
- when sort of smoothing method is truly best for this use case?
- test on larger external data set 
<!-- TODO: progress on cfd so far?  -->