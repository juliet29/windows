# Analysis: Measurements 


## Simulation vs Measurements  
<!-- TODO: real vs observed data   -->
```{python}

a00, a01 = h.import_desired_data("A", "15T")

w1 = wd2.Window_Detect2(a01)
w1.analyze_window_change(wd2.make_stl_smooth)

```

```{python}

all_names = ["Window", "Observed Temp", "Smoothed", "Difference", "Deriv1", "Deriv2"]
all_traces = ["window_norm", "temp_norm", "smooth_series", "dif", "deriv", "deriv2"]

fig, names = wd2.make_dual_plot_abstract(time=w1.time, objects=[s1, w1], names=all_names, traces=all_traces, title_arr=["Simulation", "Measurement"], )

fig = wd2.update_dual_plot(fig,  names, ["Window", "Observed Temp"],)
fig.show()

# def show_double_fig(trace, obj1=s1, obj2=w1):
#     fig1 = show_single_trace(obj1, trace, showlegend=False, width=480)
#     fig1.show()
#     fig2 = show_single_trace(obj2, trace, width=500)
#     fig2.show()

# show_double_fig("Observed Temp")
```

## Smoothing with STL
<!-- TODO: STL figure-->


```{python}


fig = wd2.update_dual_plot(fig,  names, ["Window", "Smoothed"],)
fig.show()
# show_double_fig("Smoothed")
```

## Difference
```{python}

# show_double_fig("Difference")

fig = wd2.update_dual_plot(fig,  names, ["Window", "Difference"],)
fig.show()
```

## Derivatives 
```{python}

# show_double_fig("Deriv1")

fig = wd2.update_dual_plot(fig,  names, ["Window", "Deriv1", "Deriv2"],)
fig.show()

```

<!-- ## Derivatives

```{python}
#| layout-ncol: 2
show_double_fig("Deriv2")

``` -->

## Making Predictions 
::: {.r-stack}

```{python}
#| layout-ncol: 2
#| output-location: fragment

def show_double_result(func, obj1=s1, obj2=w1, width=500, height=500):
    if func == "dist":
        fig1 = obj1.plot_distributions()
        fig2 = obj2.plot_distributions()
    elif func == "z":
        fig1 = obj1.plot_zscore()
        fig2 = obj2.plot_zscore()
    elif func == "guess_nofilter":
        fig1 = obj1.plot_guesses(timedelta=1)
        fig2 = obj2.plot_guesses(timedelta=1)
    else:
        fig1 = obj1.plot_guesses()
        fig2 = obj2.plot_guesses()
    fig1.update_layout(autosize=False, width=width, height=height, showlegend=False)
    fig2.update_layout(autosize=False, width=width, height=height,)
    fig1.show()
    fig2.show()

show_double_result("dist")
```

::: {.fragment}
```{python}
#| layout-ncol: 2
#| output-location: fragment
show_double_result("z")
```
:::

::: {.fragment}
```{python}
#| layout-ncol: 2
#| output-location: fragment
show_double_result("guess_nofilter")
```
:::

::: {.fragment}
```{python}
#| layout-ncol: 2
#| output-location: fragment
show_double_result("guess")
```
:::


:::



## Other Smoothing Techniques 
- Fitting a sinusoid 
- Modifying the STL technique?
- Exponentially weighted mean function 

## Other Smoothing Techniques 
<!-- TODO: othe rsmoothing technique figures -->

::: {.r-stack}
```{python}

w2 = wd2.Window_Detect2(a01)
w2.analyze_window_change(wd2.make_sin_smooth)

w3 = wd2.Window_Detect2(a01)
w3.analyze_window_change(wd2.make_ewm_smooth)

fig, names = wd2.make_dual_plot(w2.time, w2, w3, ["Sinusoid", "EWM"])
fig = fig.update_layout(autosize=False, width=1000, height=500,)

fig1 = wd2.update_dual_plot(fig,  names, ["Window", "Observed Temp", "Smoothed"],)

fig1.show()

```

::: {.fragment}
```{python}

fig1 = wd2.update_dual_plot(fig,  names, ["Window", "Deriv1",],)

fig1.show()
```
:::


:::


## Comparing Results 
```{python}
#| layout-row: 2

# triple plot for distributions 
fig = make_subplots(rows=1, cols=3, shared_yaxes=True, subplot_titles=["STL", "Sinusoid", "EWM"])
marker_width = 0.1 
bin_size = 0.003

for obj_ix, obj in enumerate([w1, w2, w3]):
    leg = True if obj_ix == 0 else False
    for ix, ser in enumerate([obj.deriv2, obj.deriv]):
        opacity = 0.9 if ix == 0 else 1
        color = '#702632' if ix == 0 else '#A4B494'
        fig.add_trace(go.Histogram(
        x=ser, histnorm='probability', name=f' Deriv{2 - ix}', opacity=opacity, marker_line=dict(width=marker_width ,color='black'), xbins=dict(size=bin_size), marker_color=color, showlegend=leg), row = 1, col = obj_ix+1)

fig.update_layout(barmode="stack")
fig = fig.update_layout(autosize=False, width=1000, height=300,)
fig.show()

fig1, names = wd2.make_dual_plot_abstract(time=w1.time, objects=[w1, w2, w3], names=["Window", "Z-Score", "Guesses"], traces=["window_norm", "zscore_norm", "guess_values"], title_arr=["", "", ""], mode=["lines", "lines", "markers"])
fig1 = fig1.update_layout(autosize=False, width=1000, height=300)
fig1.show()


```
<!-- table TODO: de raultin de roy metrics + compare to other ML methods on same data  -->


## Metrics 


## reflections 
- better understanding the unique way that w/o/c appears in the time series
  - how this differs 
    - based on time of day 
    - length of w/o/c
  - can use BEM + CFD for this?
- when sort of smoothing method is truly best for this use case?
- test on larger external data set 
<!-- TODO: progress on cfd so far?  -->